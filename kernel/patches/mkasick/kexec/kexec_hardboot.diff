From: Mike Kasick <mike@kasick.org>
Date: Tue, 18 Oct 2011 21:25:23 -0400

Support hard booting to a kexec kernel.

See KEXEC_HARDBOOT config option help for details.

diff --git a/kernel/arch/arm/Kconfig b/kernel/arch/arm/Kconfig
--- a/kernel/arch/arm/Kconfig
+++ b/kernel/arch/arm/Kconfig
@@ -1511,6 +1511,32 @@
 	  Should the atags used to boot the kernel be exported in an "atags"
 	  file in procfs. Useful with kexec.
 
+config KEXEC_HARDBOOT
+	bool "Support hard booting to a kexec kernel"
+	depends on KEXEC
+	help
+	  Allows hard booting (i.e., with a full hardware reboot) to a kernel
+	  previously loaded in memory by kexec.  This works around the problem of
+	  soft-booted kernel hangs due to improper device shutdown and/or
+	  reinitialization.  Support is comprised of two components:
+
+	  First, a "hardboot" flag is added to the kexec syscall to force a hard
+	  reboot in relocate_new_kernel() (which requires machine-specific assembly
+	  code).  This also requires the kexec userspace tool to load the kexec'd
+	  kernel in memory region left untouched by the bootloader (i.e., not
+	  explicitly cleared and not overwritten by the boot kernel).  Just prior
+	  to reboot, the kexec kernel arguments are stashed in a machine-specific
+	  memory page that must also be preserved.  Note that this hardboot page
+	  need not be reserved during regular kernel execution.
+
+	  Second, the zImage decompresor of the boot (bootloader-loaded) kernel is
+	  modified to check the hardboot page for fresh kexec arguments, and if
+	  present, attempts to jump to the kexec'd kernel preserved in memory.
+
+	  Note that hardboot support is only required in the boot kernel and any
+	  kernel capable of performing a hardboot kexec.  It is _not_ required by a
+	  kexec'd kernel.
+
 endmenu
 
 menu "CPU Power Management"
diff --git a/kernel/arch/arm/boot/compressed/head.S b/kernel/arch/arm/boot/compressed/head.S
--- a/kernel/arch/arm/boot/compressed/head.S
+++ b/kernel/arch/arm/boot/compressed/head.S
@@ -11,6 +11,10 @@
 #include <linux/linkage.h>
 #include <asm/memory.h>
 
+#ifdef CONFIG_KEXEC_HARDBOOT
+#include <asm/kexec.h>
+#endif
+
 /*
  * Debugging stuff
  *
@@ -141,6 +145,28 @@
 		movne	r8, r0			@ Save kexec_boot_tags.
 		moveq	r8, r2			@ save atags pointer
 
+#ifdef CONFIG_KEXEC_HARDBOOT
+		/* Check hardboot page for a kexec kernel. */
+		ldr	r3, =KEXEC_HB_PAGE_ADDR
+		ldr	r0, [r3]
+		ldr	r1, =KEXEC_HB_PAGE_MAGIC
+		teq	r0, r1
+		bne	not_booting_other
+
+		/* Clear hardboot page magic to avoid boot loop. */
+		mov	r0, #0
+		str	r0, [r3]
+
+		/* Load boot arguments and jump to kexec kernel. */
+		ldr	r0, [r3, #12]	@ kexec_boot_atags (r2: boot_atags)
+		ldr	r1, [r3, #8]	@ kexec_mach_type
+		ldr	pc, [r3, #4]	@ kexec_start_address
+
+		.ltorg
+
+not_booting_other:
+#endif
+
 #ifndef __ARM_ARCH_2__
 		/*
 		 * Booting from Angel - need to enter SVC mode and disable
diff --git a/kernel/arch/arm/configs/victory_8G_defconfig b/kernel/arch/arm/configs/victory_8G_defconfig
--- a/kernel/arch/arm/configs/victory_8G_defconfig
+++ b/kernel/arch/arm/configs/victory_8G_defconfig
@@ -435,6 +435,7 @@
 # CONFIG_XIP_KERNEL is not set
 CONFIG_KEXEC=y
 CONFIG_ATAGS_PROC=y
+CONFIG_KEXEC_HARDBOOT=y
 
 #
 # CPU Power Management
diff --git a/kernel/arch/arm/include/asm/kexec.h b/kernel/arch/arm/include/asm/kexec.h
--- a/kernel/arch/arm/include/asm/kexec.h
+++ b/kernel/arch/arm/include/asm/kexec.h
@@ -17,6 +17,10 @@
 #define KEXEC_ARM_ATAGS_OFFSET  0x1000
 #define KEXEC_ARM_ZIMAGE_OFFSET 0x8000
 
+#ifdef CONFIG_KEXEC_HARDBOOT
+#define KEXEC_HB_PAGE_MAGIC 0x4a5db007
+#endif
+
 #ifndef __ASSEMBLY__
 
 struct kimage;
diff --git a/kernel/arch/arm/kernel/machine_kexec.c b/kernel/arch/arm/kernel/machine_kexec.c
--- a/kernel/arch/arm/kernel/machine_kexec.c
+++ b/kernel/arch/arm/kernel/machine_kexec.c
@@ -13,6 +13,10 @@
 #include <asm/cacheflush.h>
 #include <asm/mach-types.h>
 
+#if defined(CONFIG_KEXEC_HARDBOOT) && defined(CONFIG_ARCH_S5PV210)
+#include <mach/regs-clock.h>
+#endif
+
 extern const unsigned char relocate_new_kernel[];
 extern const unsigned int relocate_new_kernel_size;
 
@@ -22,6 +26,10 @@
 extern unsigned long kexec_indirection_page;
 extern unsigned long kexec_mach_type;
 extern unsigned long kexec_boot_atags;
+#ifdef CONFIG_KEXEC_HARDBOOT
+extern unsigned long kexec_hardboot;
+#endif
+
 
 /*
  * Provide a dummy crash_notes definition while crash dump arrives to arm.
@@ -64,6 +72,10 @@
 	kexec_indirection_page = page_list;
 	kexec_mach_type = machine_arch_type;
 	kexec_boot_atags = image->start - KEXEC_ARM_ZIMAGE_OFFSET + KEXEC_ARM_ATAGS_OFFSET;
+#ifdef CONFIG_KEXEC_HARDBOOT
+	kexec_hardboot = image->hardboot;
+#endif
+
 
 	/* copy our kernel relocation code to the control code page */
 	memcpy(reboot_code_buffer,
@@ -79,6 +91,12 @@
 
 	setup_mm_for_reboot(0); /* mode is not used, so just pass 0*/
 
+#if defined(CONFIG_KEXEC_HARDBOOT) && defined(CONFIG_ARCH_S5PV210)
+	/* Show logo.jpg on reboot instead of _charging.jpg when USB is connected. */
+	if (image->hardboot)
+		writel(0x12345678, S5P_INFORM5);
+#endif
+
 	flush_cache_all();
 	cpu_proc_fin();
 	flush_cache_all();
diff --git a/kernel/arch/arm/kernel/relocate_kernel.S b/kernel/arch/arm/kernel/relocate_kernel.S
--- a/kernel/arch/arm/kernel/relocate_kernel.S
+++ b/kernel/arch/arm/kernel/relocate_kernel.S
@@ -4,6 +4,13 @@
 
 #include <asm/kexec.h>
 
+#ifdef CONFIG_KEXEC_HARDBOOT
+#include <asm/memory.h>
+#ifdef CONFIG_ARCH_S5PV210
+#include <mach/map.h>
+#endif
+#endif
+
 	.globl relocate_new_kernel
 relocate_new_kernel:
 
@@ -46,6 +53,12 @@
 	b 0b
 
 2:
+#ifdef CONFIG_KEXEC_HARDBOOT
+	ldr	r0, kexec_hardboot
+	teq	r0, #0
+	bne	hardboot
+#endif
+
 	/* Jump to relocated kernel */
 	mov lr,r1
 	mov r0,#0
@@ -53,6 +66,41 @@
 	ldr r2,kexec_boot_atags
 	mov pc,lr
 
+#ifdef CONFIG_KEXEC_HARDBOOT
+hardboot:
+	/* Stash boot arguments in hardboot page:
+	 *  0: KEXEC_HB_PAGE_MAGIC
+	 *  4: kexec_start_address
+	 *  8: kexec_mach_type
+	 * 12: kexec_boot_atags */
+	ldr	r0, =KEXEC_HB_PAGE_ADDR
+	str	r1, [r0, #4]
+	ldr	r1, kexec_mach_type
+	str	r1, [r0, #8]
+	ldr	r1, kexec_boot_atags
+	str	r1, [r0, #12]
+	ldr	r1, =KEXEC_HB_PAGE_MAGIC
+	str	r1, [r0]
+
+#ifdef CONFIG_ARCH_S5PV210
+	/* Hard reset via watchdog, decompressor jumps to kernel. */
+	ldr	r0, =S5P_PA_WDT
+	mov	r1, #0x8000
+	str	r1, [r0, #4]
+	mov	r1, #1
+	str	r1, [r0, #4]
+	mov	r1, #8
+	str	r1, [r0, #8]
+	movw	r1, #0x8021
+	str	r1, [r0]
+loop:	b	loop
+#else
+#error "No reboot method defined for hardboot."
+#endif
+
+	.ltorg
+#endif
+
 	.globl kexec_start_address
 kexec_start_address:
 	.long	0x0
@@ -70,6 +118,12 @@
 kexec_boot_atags:
 	.long	0x0
 
+#ifdef CONFIG_KEXEC_HARDBOOT
+	.globl kexec_hardboot
+kexec_hardboot:
+	.long	0x0
+#endif
+
 relocate_new_kernel_end:
 
 	.globl relocate_new_kernel_size
diff --git a/kernel/arch/arm/mach-s5pv210/include/mach/memory.h b/kernel/arch/arm/mach-s5pv210/include/mach/memory.h
--- a/kernel/arch/arm/mach-s5pv210/include/mach/memory.h
+++ b/kernel/arch/arm/mach-s5pv210/include/mach/memory.h
@@ -29,4 +29,8 @@
 #define SECTION_SIZE_BITS	28
 #define NODE_MEM_SIZE_BITS   28
 
+#if defined(CONFIG_KEXEC_HARDBOOT) && !defined(CONFIG_MACH_SMDKV210) && defined(CONFIG_DDR_RAM_3G)
+#define KEXEC_HB_PAGE_ADDR 0x57fff000
+#endif
+
 #endif /* __ASM_ARCH_MEMORY_H */
diff --git a/kernel/include/linux/kexec.h b/kernel/include/linux/kexec.h
--- a/kernel/include/linux/kexec.h
+++ b/kernel/include/linux/kexec.h
@@ -100,6 +100,9 @@
 #define KEXEC_TYPE_DEFAULT 0
 #define KEXEC_TYPE_CRASH   1
 	unsigned int preserve_context : 1;
+#ifdef CONFIG_KEXEC_HARDBOOT
+	unsigned int hardboot : 1;
+#endif
 
 #ifdef ARCH_HAS_KIMAGE_ARCH
 	struct kimage_arch arch;
@@ -165,6 +168,9 @@
 
 #define KEXEC_ON_CRASH		0x00000001
 #define KEXEC_PRESERVE_CONTEXT	0x00000002
+#ifdef CONFIG_KEXEC_HARDBOOT
+#define KEXEC_HARDBOOT		0x00000004
+#endif
 #define KEXEC_ARCH_MASK		0xffff0000
 
 /* These values match the ELF architecture values.
@@ -183,10 +189,14 @@
 #define KEXEC_ARCH_MIPS    ( 8 << 16)
 
 /* List of defined/legal kexec flags */
-#ifndef CONFIG_KEXEC_JUMP
-#define KEXEC_FLAGS    KEXEC_ON_CRASH
+#if defined(CONFIG_KEXEC_JUMP) && defined(CONFIG_KEXEC_HARDBOOT)
+#define KEXEC_FLAGS    (KEXEC_ON_CRASH | KEXEC_PRESERVE_CONTEXT | KEXEC_HARDBOOT)
+#elif defined(CONFIG_KEXEC_JUMP)
+#define KEXEC_FLAGS    (KEXEC_ON_CRASH | KEXEC_PRESERVE_CONTEXT)
+#elif defined(CONFIG_KEXEC_HARDBOOT)
+#define KEXEC_FLAGS    (KEXEC_ON_CRASH | KEXEC_HARDBOOT)
 #else
-#define KEXEC_FLAGS    (KEXEC_ON_CRASH | KEXEC_PRESERVE_CONTEXT)
+#define KEXEC_FLAGS    (KEXEC_ON_CRASH)
 #endif
 
 #define VMCOREINFO_BYTES           (4096)
diff --git a/kernel/kernel/kexec.c b/kernel/kernel/kexec.c
--- a/kernel/kernel/kexec.c
+++ b/kernel/kernel/kexec.c
@@ -1002,6 +1002,10 @@
 
 		if (flags & KEXEC_PRESERVE_CONTEXT)
 			image->preserve_context = 1;
+#ifdef CONFIG_KEXEC_HARDBOOT
+		if (flags & KEXEC_HARDBOOT)
+			image->hardboot = 1;
+#endif
 		result = machine_kexec_prepare(image);
 		if (result)
 			goto out;

From: Mike Kasick <mike@kasick.org>
Date: Tue, 18 Oct 2011 22:17:37 -0400

Disable sensitive printks and allow them to be reenabled via sysfs.

See KEYPAD_S3C_SENSITIVE_PRINTKS config option help for details.  Also
removes some redundant keypress logging introduced in GB.

diff --git a/kernel/drivers/input/keyboard/Kconfig b/kernel/drivers/input/keyboard/Kconfig
--- a/kernel/drivers/input/keyboard/Kconfig
+++ b/kernel/drivers/input/keyboard/Kconfig
@@ -484,6 +484,24 @@
 	  very inefficient, 6.9% CPU util., for a timer delay of "7".  Values of
 	  "50" (1.4% CPU) and even "5" (0.2% CPU) work well without ghosting.  This
 	  delay affects efficiency only, not responsiveness.
+
+config KEYPAD_S3C_SENSITIVE_PRINTKS
+	bool "Disable sensitive printks and allow them to be reenabled via sysfs"
+	depends on KEYPAD_S3C && SYSFS
+	default y
+	help
+	  Disables writing of sensitive (e.g., keycode) information to the kernel
+	  message ring buffer.  Also adds a sysfs variable (sensitive_printks) to
+	  allow sensitive printks to be (temporarily) reenabled for debugging
+	  purposes.
+
+	  The current sensitive_printks setting may be read with:
+	    cat /sys/devices/platform/s3c-keypad/sensitive_printks
+
+	  Sensitive printks may be reenabled with:
+	    echo 1 > /sys/devices/platform/s3c-keypad/sensitive_printks
+	  and disabled again with:
+	    echo 0 > /sys/devices/platform/s3c-keypad/sensitive_printks
 endif
 
 config S3C_KEYPAD_DEBUG
diff --git a/kernel/drivers/input/keyboard/s3c-keypad.c b/kernel/drivers/input/keyboard/s3c-keypad.c
--- a/kernel/drivers/input/keyboard/s3c-keypad.c
+++ b/kernel/drivers/input/keyboard/s3c-keypad.c
@@ -44,7 +44,6 @@
 #endif
 
 #define USE_PERF_LEVEL_KEYPAD 1 
-#define DEBUG_LOG_ENABLE 0
 #undef S3C_KEYPAD_DEBUG 
 
 #ifdef S3C_KEYPAD_DEBUG
@@ -96,6 +95,17 @@
 #define TIMER_DELAY  TIMER_DELAY_DEFAULT
 #endif
 
+#ifdef CONFIG_KEYPAD_S3C_SENSITIVE_PRINTKS
+static bool sensitive_printks = false;
+
+#define SENSITIVE(expr) do { \
+	if (sensitive_printks) \
+		(expr); \
+} while (0)
+#else
+#define SENSITIVE(expr) (expr)
+#endif
+
 //static ssize_t keyshort_test(struct device *dev, struct device_attribute *attr, char *buf);
 
 //hojun_kim [
@@ -247,22 +257,16 @@
                         some_keys_pressed++;
 			if(some_keys_pressed < 3)
                       	input_report_key(dev,i+1,1);
-                             pr_err("[key_press] keycode=%d\n", i+1);
+                             SENSITIVE(pr_err("[key_press] keycode=%d\n", i+1));
 					}
 				else
 				{
 				if( i  != 5 &&i  != 15 &&i  != 25 &&i  != 35 &&i  != 44 )
 					{
 				input_report_key(dev,i+1,1);
-                             pr_err("[key_press_OFF] keycode=%d\n", i+1);
+                             SENSITIVE(pr_err("[key_press_OFF] keycode=%d\n", i+1));
 					}
 				}
-//#ifdef CONFIG_KERNEL_DEBUG_SEC
-#if DEBUG_LOG_ENABLE
-				printk(KERN_DEBUG"[KEYPAD] key Pressed  : key %d map %d\n",i, i+1);
-#else
-				printk(KERN_DEBUG"[KEYPAD] key Pressed\n");
-#endif
 			
 				/*input_report_key(dev,pdata->keycodes[i],1);
 				DPRINTK("\nkey Pressed  : key %d map %d\n",i, pdata->keycodes[i]); */
@@ -280,22 +284,16 @@
 			       if((i+1 == 35) || (i+1 == 36) || (i+1 == 46))
 			        some_keys_pressed--;
 				input_report_key(dev,i+1,0);
-                             pr_err("[key_release] keycode=%d\n", i+1);
+                             SENSITIVE(pr_err("[key_release] keycode=%d\n", i+1));
 				}
 				else
 				{
 				if( i  != 5 &&i  != 15 &&i  != 25 &&i  != 35 &&i  != 44 )				
 				{
 				input_report_key(dev,i+1,0);
-                             pr_err("[key_release_OFF] keycode=%d\n", i+1);
+                             SENSITIVE(pr_err("[key_release_OFF] keycode=%d\n", i+1));
 					}
 				}
-//#ifdef CONFIG_KERNEL_DEBUG_SEC
-#if DEBUG_LOG_ENABLE
-				printk(KERN_DEBUG"[KEYPAD] key Pressed  : %d  map %d\n",i, i+1);
-#else
-				printk(KERN_DEBUG"[KEYPAD] key Pressed\n");
-#endif                                
 
                     }
 			release_mask >>= 1;
@@ -533,6 +531,36 @@
 #undef DELAY_ATTR
 #endif
 
+#ifdef CONFIG_KEYPAD_S3C_SENSITIVE_PRINTKS
+static ssize_t sensitive_printks_show(struct device *dev,
+                                      struct device_attribute *attr,
+                                      char *buf)
+{
+	return snprintf(buf, PAGE_SIZE, "%u\n", sensitive_printks);
+}
+
+static ssize_t sensitive_printks_store(struct device *dev,
+                                       struct device_attribute *attr,
+                                       const char *buf, size_t count)
+{
+	unsigned long val;
+	int res;
+
+	if ((res = strict_strtoul(buf, 10, &val)) < 0)
+		return res;
+
+	if (val == 0 || val == 1)
+		sensitive_printks = val;
+	else
+		return -EINVAL;
+
+	return count;
+}
+
+static DEVICE_ATTR(sensitive_printks, S_IRUGO | S_IWUSR,
+                   sensitive_printks_show, sensitive_printks_store);
+#endif
+
 static int __init s3c_keypad_probe(struct platform_device *pdev)
 {
 	struct resource *res, *keypad_mem, *keypad_irq;
@@ -694,6 +722,10 @@
 		pr_err("Unable to create \"%s\".\n", dev_attr_timer_delay.attr.name);
 #endif
 
+#ifdef CONFIG_KEYPAD_S3C_SENSITIVE_PRINTKS
+	if (device_create_file(&pdev->dev, &dev_attr_sensitive_printks) < 0)
+		pr_err("Unable to create \"%s\".\n", dev_attr_sensitive_printks.attr.name);
+#endif
 	
 	return 0;
 
@@ -735,6 +767,9 @@
 	device_remove_file(&pdev->dev, &dev_attr_column_delay);
 	device_remove_file(&pdev->dev, &dev_attr_timer_delay);
 #endif
+#ifdef CONFIG_KEYPAD_S3C_VICTORY_SENSITIVE_PRINTKS
+	device_remove_file(&pdev->dev, &dev_attr_sensitive_printks);
+#endif
 	input_unregister_device(input_dev);
 	iounmap(key_base);
 	kfree(pdev->dev.platform_data);
